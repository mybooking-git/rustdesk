name: Windows Build Only

on:
  push:
    branches: [ my-custom ]
    paths:
      - '**.rs'
      - '**.dart'
      - '**.yml'
      - '**.toml'
      - '**.cpp'
      - '**.h'
  pull_request:
    branches: [ my-custom ]
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  BUILD_TYPE: Release

jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, x86]  # 同时构建 64 位和 32 位
        include:
          - arch: x64
            rust_target: x86_64-pc-windows-msvc
            vcpkg_triplet: x64-windows-static
          - arch: x86
            rust_target: i686-pc-windows-msvc
            vcpkg_triplet: x86-windows-static

    steps:
      # 1. 检出代码（包含子模块）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. 设置 Rust 工具链
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}

      # 3. 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          architecture: x64

      # 4. 安装 Windows 依赖（完全复用原脚本）
      - name: Install Windows dependencies
        shell: pwsh
        run: |
          ./scripts/windows/install_deps.ps1 -Arch ${{ matrix.arch }}

      # 5. 构建 Rust 主程序（复用原参数）
      - name: Build RustDesk
        shell: bash
        run: |
          # 生成 Sciter 内联资源
          python3 res/inline-sciter.py

          # 构建 Rust（启用硬件加速）
          cargo build --${{ env.BUILD_TYPE }} \
            --target ${{ matrix.rust_target }} \
            --features inline,vram,hwcodec

      # 6. 准备发布文件
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.rust_target }}/${{ env.BUILD_TYPE }}/rustdesk.exe artifacts/
          cp -r scripts/windows/sciter.dll artifacts/

          # 下载 usbmmidd（复用原仓库逻辑）
          curl -L -o usbmmidd_v2.zip \
            https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip
          unzip usbmmidd_v2.zip -d artifacts/usbmmidd_v2

      # 7. 打包便携版（复用原脚本）
      - name: Create portable package
        shell: bash
        run: |
          pushd libs/portable
          pip install -r requirements.txt
          python generate.py -f ../../artifacts/ -o ../../ -e ../../artifacts/rustdesk.exe
          popd
          mv rustdesk-portable-packer.exe artifacts/rustdesk-${{ github.ref_name || 'nightly' }}-${{ matrix.arch }}.exe

      # 8. 生成 MSI 安装包（复用原 MSI 逻辑）
      - name: Build MSI installer
        shell: pwsh
        run: |
          cd res/msi
          python preprocess.py --arp -d ../../artifacts
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform="${{ matrix.arch }}" /p:TargetVersion=Windows10
          mv Package/bin/${{ matrix.arch }}/Release/en-us/Package.msi ../../artifacts/rustdesk-${{ github.ref_name || 'nightly' }}-${{ matrix.arch }}.msi

      # 9. 上传制品
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-${{ matrix.arch }}
          path: artifacts/*
