name: Windows Build Only

on:
  push:
    branches: [ my-custom ]
    paths:
      - '**.rs'
      - '**.dart'
      - '**.yml'
      - '**.toml'
      - '**.cpp'
      - '**.h'
  pull_request:
    branches: [ my-custom ]
  workflow_dispatch:  # 允许手动触发

env:
  VERSION: ${{ github.ref_name || 'dev' }}
  UPLOAD_ARTIFACT: 'true'
  SIGN_BASE_URL: ${{ secrets.SIGN_BASE_URL }}
  TAG_NAME: ${{ github.ref_name || 'dev-build' }}

jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]  # 同时构建 64 位和 32 位
        include:
          - arch: x64
            target: x86_64-pc-windows-msvc
            vcpkg_triplet: x64-windows-static
          - arch: x86
            target: i686-pc-windows-msvc
            vcpkg_triplet: x86-windows-static

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          architecture: x64  # Windows 只需 x64 架构的 Flutter

      - name: Set up VCPKG (for FFmpeg/Opus)
        uses: microsoft/vcpkg-action@v1
        with:
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg
          vcpkgTriplet: ${{ matrix.vcpkg_triplet }}
          vcpkgArguments: 'ffmpeg opus'

      - name: Build RustDesk (Flutter + Rust)
        shell: bash
        run: |
          # 生成 Sciter 内联资源
          python3 res/inline-sciter.py

          # 构建 Rust 主程序（启用硬件加速）
          cargo build --features inline,vram,hwcodec --release --target ${{ matrix.target }}

          # 准备输出目录
          mkdir -p ./Release
          mv ./target/${{ matrix.target }}/release/rustdesk.exe ./Release/

          # 下载 Sciter.dll 和 usbmmidd
          curl -LJ -o ./Release/sciter.dll https://github.com/c-smile/sciter-sdk/raw/master/bin.win/${{ matrix.arch }}/sciter.dll
          curl -LJ -o ./usbmmidd_v2.zip https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip
          unzip usbmmidd_v2.zip -d ./Release/usbmmidd_v2

      - name: Build Portable Executable
        shell: bash
        run: |
          pushd ./libs/portable
          pip3 install -r requirements.txt
          python3 generate.py -f ../../Release/ -o . -e ../../Release/rustdesk.exe
          popd
          mkdir -p ./SignOutput
          mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.arch }}.exe

      - name: Build MSI Installer
        run: |
          pushd ./res/msi
          python preprocess.py --arp -d ../../Release
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform="${{ matrix.arch }}" /p:TargetVersion=Windows10
          mv ./Package/bin/${{ matrix.arch }}/Release/en-us/Package.msi ../../SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.arch }}.msi
          popd

      - name: Sign Artifacts (Optional)
        if: env.SIGN_BASE_URL != ''
        shell: bash
        run: |
          pip3 install requests
          python3 res/job.py sign_files ./SignOutput

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-${{ matrix.arch }}
          path: ./SignOutput/*

      - name: Create Release (on Tag)
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        with:
          files: ./SignOutput/*
          tag_name: ${{ env.TAG_NAME }}
